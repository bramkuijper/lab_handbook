[["index.html", "A typical work cycle when running simulations Chapter 1 Introduction", " A typical work cycle when running simulations Bram Kuijper 2022-06-01 Chapter 1 Introduction This document gives you an overview of some of the key computing practices used in our lab. Enjoy! "],["installing-and-using-software-to-do-your-work.html", "Chapter 2 Installing and using software to do your work 2.1 On a Mac? Install your software using the Homebrew package manager 2.2 Rstudio 2.3 Installing Python 2.4 Installing software to develop C++ programs 2.5 Do we really need a UNIX terminal?", " Chapter 2 Installing and using software to do your work To do your research in theoretical or computational biology, you will need to install a bunch of software. I typically try to keep things as free and open access as possible, so that you don’t have hassle with license fees. However, this is not always possible (e.g., research projects involving Mathematica or matlab). Don’t install all the software listed below - by now, you should have a clear idea what selection of software you need. If not, get in touch asap. 2.1 On a Mac? Install your software using the Homebrew package manager Homebrew is a small program that allows you to install and update multiple programs on your Mac simultaneously. Indeed, all research software that you will need on your Mac can be installed with homebrew. Using homebrew has the advantage that installation involves a single command, rather than you having to search for the correct version of the software online. Moreover, all installed packages will be updated to their latest versions by using two simple commands: brew update, following by brew upgrade. 2.1.1 Installing homebrew To install homebrew, you need to open the Terminal app (see here about where to find the Terminal app on your Mac). Once the terminal is open, copy the single-line install statement from the Homebrew website and paste it into the Terminal app. Then press ‘Enter’. You will get a bunch of straightforward questions, after which homebrew installs itself. 2.1.2 Installing your first application using homebrew After homebrew is installed, you can use it to install other applications. You can search for software available for install through homebrew by using the website formulae.brew.sh. Let us install the [Textmate] text editor that we might need later. We do so using the Terminal app app, in which we type brew install --cask textmate 2.1.3 Updating all applications that have been installed via homebrew This is where things get handier than installing all software individually: brew update &amp;&amp; brew upgrade 2.2 Rstudio Rather than using the absolute bare bones version of R, I’d use Rstudio as it provides a full-blown IDE (integrated development environment) with text editor, variable inspector, file browswer and more. You can either use the Rstudio server that is offered by the University of Exeter, or use a locally installed version of Rstudio. Personally, the server-based version of Rstudio is probably the easiest to use, as it already has tons of packages pre-installed. However, if you have no uni access anymore or don’t have continuous internet access, a locally installed version of Rstudio is best. 2.2.1 Using the web-based Rstudio server You can simply access this by using your web browser. You can access the Rstudio server here: https://rstudio01.cles.ex.ac.uk, using your University of Exeter login. Once logged in, make sure to run the 4.x.x version, rather than a 3.x.x version. You can change versions on the top right of your Rstudio window within in your web browser. By now 2.2.2 Installing Rstudio on your own computer on windows or mac If you have a Windows machine, the best way to install Rstudio is to download the Desktop version. If you are on a mac, one could use: brew install --cask rstudio 2.3 Installing Python You will need to install the Spyder IDE and associated packages. To this end, it is best to install Anaconda which provide the whole python bundle and comes with a package manager. 2.4 Installing software to develop C++ programs When working with the programming language C++, we will need to use the following software: A UNIX Terminal (already installed on a mac, you will need to install on windows - see below) A C++ compiler, which in our case will be clang on mac and g++ on windows (see below). A better-than-normal text editor. When on Windows, install the freely available text editor Notepad++. See the Notepad++ website for installation instructions. When on a mac, install an editor such as textmate (see below). A software build environment like make or cmake. 2.5 Do we really need a UNIX terminal? Yes, you will need a UNIX terminal to access a broad collection of tools, namely the compiler g++ o turn your C++ code into an executable programme, the command git to get code from repositories and make or cmake to automate the building of your code. Sure, it would be possible to do this using Microsoft’s Visual Studio. However, we decided to go for a UNIX-based toolchain everywhere, as these allow us to use the same compiler tools as used on the University’s Linux computing clusters. This is important, as chances are that later on in your project you may want to run your simulations on one of these clusters to run a lot more replicate simulations or explore a large number of parameter combinations. If one has been working with Visual Studio, it typically is a massive pain to switch back to the different tools/compilers used on these Linux clusters. Hence, that is why we stick to a UNIX toolchain. 2.5.1 Installing a UNIX terminal on Windows To get a UNIX terminal running on windows, we will install the MSYS2 environment. See here for the installation video. There is also another video that shows you how to subsequently work with the compiler, once installed. 2.5.2 Installing a command-line C++ compiler on windows. Rather than using any C++ compiler like Visual Studio or Code Blocks, we use the compiler g++, as that compiler is the same as used on our computing clusters. To install it, see the instruction video here. 2.5.3 Installing git on windows 2.5.4 Using the Mac OS Terminal app To use the UNIX toolchain on a mac, you will need to use a UNIX terminal. Luckily this is installed as per default on any mac distribution. You can find the Terminal app in the Applications &gt; Utilities folder on your hard drive. See Apple’s support page here for more information on how to open this application. 2.5.5 Installing g++ on a Mac In order to install g++ on a Mac, you need to follow quite some instructions. Sorry no video. "],["a-typical-daily-work-cycle-when-running-simulations.html", "Chapter 3 A typical daily work cycle when running simulations 3.1 Start the terminal 3.2 Get to your home directory 3.3 Check the contents of your home directory 3.4 Obtaining the simulation source code from github 3.5 Compiling the software", " Chapter 3 A typical daily work cycle when running simulations Here we illustrate some of the basic steps we take to run simulations and analyze them. Please type along so that you can see what is happening on your own computer. 3.1 Start the terminal By now, you should be able to start your UNIX terminal programme, which should be MSYS2-64 on windows or the Terminal programme on a mac. If you don’t know where to find your UNIX terminal, read section 2.4 and if that still does not work, get in touch. 3.2 Get to your home directory By using your UNIX terminal, go to your home directory. The home directory is contained in the alias ~ and can be accessed by using the cd command in the following way: cd ~ pwd ## /home/anaduarte where the last line lists the pwd command (present working directory) which gives your current location. 3.2.1 Windows users: accessing your home directory in MSYS2 and Windows File Explorer The home directory ~ in MSYS2 is not the same as your Windows home directory! Rather, MSYS2’s home directory ~ maps to something like C:/MSYS2/home, rather than to the usual location of the windows home directory which is something like C:/Users/alwk/home. Knowing that ~ is somewhere else than the standard home directory, you can still use the Windows File Explorer to access this location and inspect the files present in ~. Click the This PC in the left column and go to C:/MSYS2/home/. 3.3 Check the contents of your home directory You can check the contents of your home directory using the ls (list files) command, where we provide the ls command with some additional ‘flags’, which are given by a dash -, followed by some additional single-character modifiers that change the behaviour of the ls command: ls -alnh Here we used the flags -alnh to make sure (i) we list hidden files (-a), (ii) we list all files below each other (the long format: -l) rather than dumping all files together on a single line, (iii) we list all files with numeric user and group IDs (-n) and finally (iv) we list all dates and numbers in a human-readable format (-h). If you want to know more about the documentation of the ls command, type: man ls which provides you with a manual page (man page) of the ls command. You can close this man page and return to the command line by pressing the q button. 3.4 Obtaining the simulation source code from github All research projects in this lab use code repositories on github, which you can clone to your own computer. Working with code on github has several advantages. One is that it is relatively easy to carry through updates in the code without having to e-mail around umpteen different versions of the source code. Moreover, once you have your own github account and I give you write access to my code repository, you can then submit your own updates to my github repository, so that we all have the latest version of the code available. Finally, github is great when it comes to recording changes and allowing you to roll back changes. 3.4.1 Finding out whether you have already cloned a code repository If you vaguely remember using the git clone command before, perhaps you should first inspect the output of the ls -lanh command from within your home directory (cd ~) to find out whether a copy of the github repository in question is already present within your home directory. If you indeed find a directory within your home directory that looks remarkably similar to one of the repositories, you know enough and you can skip the next step. 3.4.2 Get the simulation code by using git clone To download a copy of the remote repository containing the simulation code to your own computer, do the following git clone https://github.com/bramkuijper/YOUR_REPOSITORY where YOUR_REPOSITORY is the name of the repository that you should be using from this list. By now, you should know the name of the repository you should be cloning, otherwise get in touch. 3.4.3 Exploring the local copy of the repository Once everything is cloned to your local hard disk, you can explore its contents. Using your UNIX terminal (MSYS2 on windows, Terminal on a mac), you can cd into the repository and use ls to explore the different files. Alternatively, you can also your file explorer programme (Windows File Explorer or Finder) to go the location of your repository (see section 3.2.1). The files that end in .cpp are the C++ source files, which contain the necessary code. The files that end in .hpp are C++ header files, which provide a blueprint to the C++ compiler about the interface of the different classes and structs used. Next, you may also see a file such as CMakelists.txt or makefile which are used by cmake and make, two programmes that make it (much) easier to compile all the software. 3.4.4 Inspecting the source code You can inspect the source code of the various do this by using notepad++ (on windows), which you can open through the windows start menu. Within notepad++ you then have to navigate to the location of your 3.4.5 Update the software repositroy If you already have git cloned a repository, cd to the directory of the repository on your local computer and obtain the most recent version of the repository. You do so by typing git pull If you see the following message: Already up-to-date. you already have the latest version of the source code in your repository. 3.4.6 Conflicts when updating the software repository It may be that you get messages like git pull #error: Pulling is not possible because you have unmerged files. #hint: Fix them up in the work tree, and then use &#39;git add/rm &lt;file&gt;&#39; #hint: as appropriate to mark resolution and make a commit. #fatal: Exiting because of an unresolved conflict. in which case you might have files in which you have made local edits which clash with any remote edits. This is called a ‘conflict’, as apparently, your edits conflict with remote edits. There are two options: If you deem your edits to not be so important: Use git to overwrite the edits with the version from the remote repository. To this end, cd into the folder of your repository and do the following: git checkout --theirs . which tells git to checkout files from the remote repository (--theirs) and replace files in the local repository (.). If your edits are very important If you open your files in your editor, you should find lines that highlight &gt;&gt;&gt;&gt; some text ==== some text &lt;&lt;&lt; which reflect the various edits. Try to make choices about what you find important and make sure that the &gt;&gt;&gt;&gt;, === and &lt;&lt;&lt;&lt; characters are removed from the file. 3.5 Compiling the software For a typical simulation, you will find the source code in the src directory (or one of its subdirectories) within the repository. Have a look around! If you don’t want to use the terminal, use "],["some-writing-advice.html", "Chapter 4 Some Writing Advice 4.1 Read about writing: literature that helps improving writing skills 4.2 Example theory papers to help you write about theory 4.3 Common examples where writing goes wrong", " Chapter 4 Some Writing Advice Writing your dissertation or literature review can be a challenge. Here some advice: 4.1 Read about writing: literature that helps improving writing skills We all read books to improve our writing, even when you are a native speaker and think you have seen it all! (hint: you haven’t.) Reading about writing techniques is a great way to improve your skills. If you want to know more about scientific writing, perhaps the short book by Mack (2018) might well be worth trying. This book is freely available online here. Another good book on how to write scientific papers is Gastel and Day (2022). For a literature review, it can be helpful to read the paper by Sayer (2018), which is all about how to write review papers. Next to learning more about the techniques of scientific writing, it might be helpful to improve your general writing skills too. Several good books are available. A first one is Williams (1990) which has later on appeared with different titles. Other books are Pinker (2014) and Zinsser (2006). A classic is Strunk (1959). Hard copies of most of these books are available at the library or in my office. Of course, you should not be looking around the internet for pdfs of these books! 4.2 Example theory papers to help you write about theory Papers on theory are a bit different than empirical studies. Hence, here a bunch of examples to see how theory papers are typically written: (Fawcett et al. 2007),(Trimmer et al. 2015),(Kahn, Jennions, and Kokko 2015). In a theory paper it is important to explain the parameters that you use and why. In part, such explanations may focus on a comparison to previous theory, as in: “To compare our model to predictions made by the classical hawk-dove game (Maynard Smith and Price 1973), the cost of losing a fight \\(c\\) and the value \\(v\\) of winning a fight are modeled as unidimensional variables with \\(c &gt; v\\).”. Alternatively, you could refer to the empirical literature, as in: “In speckled wood butterflies, it is unlikely that \\(v&gt;c\\), because territories are far too temporary to be of any value.” 4.3 Common examples where writing goes wrong 4.3.1 Back up qualitative statements Avoid sentences like “The random matrix method introduced by May 1977 has been highly important in theoretical ecology. Here we use this technique to understand how mutualisms affect ecosystem dynamics”. The first sentence makes a claim about importance, but does not back it up with a statement that indeed testifies of its importance (one may add: “as this approach has been central to the analysis of ecosystem stability in several later studies [citations]”). But even then, you could argue that it still tells very little: why not tell us instead what the random matrix method is about and what it does? 4.3.2 Being overly verbose Avoid sentences such as “Territory productivity can be measured by a variety of indirect and direct methods (Davies et al 2012). These measures can be used to calibrate simulation models.” The mentioning of “indirect and direct methods” adds very little here. Why not give at least an example of an indirect and a direct method? Or perhaps scrap the indirect vs direct and just focus on ‘different methods’ and then give an example of such a method. Or if you realize the sentence on different methods adds too little, why not omit it altogether? 4.3.3 Make sure each paragraph addresses the broader question It is easy to get mired into examples or definition questions that are a bit particularly. Unless you make explicit why the paragraph contributes to insight about the broader question asked in your dissertation, consider what you are writing irrelevant. 4.3.4 Clearly label figures If you use a figure with different panels, each panel should have a label, such as “A”, “B”, “C”, etc. There are no excuses. If your R package does not do that, edit your figure in a graphics programme, or look at some of the queries about labeling figure panels in ggplot, for example here. 4.3.5 Reference all figures If you don’t refer to a figure in the text, you don’t need it. Throw it out. 4.3.6 Explain terminology upon first use Typically, assume that the audience is someone who knows quite something but is not necessarily a scientist. For example, a 2nd-year undergraduate. So any terminology needs to be explained, let alone any abbreviations upon first mentioning. 4.3.7 Various writing errors: It is evolutionarily stable strategy, not evolutionary stable strategy Temperature-related perturbations instead of temperature related perturbations "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
