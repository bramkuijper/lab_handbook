[["index.html", "A typical work cycle when running simulations Chapter 1 Introduction", " A typical work cycle when running simulations Bram Kuijper 2022-06-07 Chapter 1 Introduction This document gives you an overview of some of the key computing practices used in our lab. Enjoy! "],["installing-and-using-software-to-do-your-work.html", "Chapter 2 Installing and using software to do your work 2.1 On a Mac? Install your software using the Homebrew package manager 2.2 Rstudio 2.3 Installing Python 2.4 Installing software to develop C++ programs 2.5 Yes, we really need a UNIX terminal. 2.6 Windows: install MSYS2 as our UNIX terminal 2.7 Mac: a UNIX terminal is provided via the Terminal app within the Applications/Utilities folder", " Chapter 2 Installing and using software to do your work To do your research in theoretical or computational biology, you will need to install a bunch of software. I typically try to keep things as free and open access as possible, so that you don’t have hassle with license fees. However, this is not always possible (e.g., research projects involving Mathematica or matlab). Don’t install all the software listed below - by now, you should have a clear idea what selection of software you need. If not, get in touch asap. 2.1 On a Mac? Install your software using the Homebrew package manager Homebrew is a small program that allows you to install and update multiple programs on your Mac simultaneously. Indeed, all research software that you will need on your Mac can be installed with homebrew. Using homebrew has the advantage that installation involves a single command, rather than you having to search for the correct version of the software online. Moreover, all installed packages will be updated to their latest versions by using two simple commands: brew update, following by brew upgrade. 2.1.1 Installing homebrew To install homebrew, you need to open the Terminal app (see here about where to find the Terminal app on your Mac). Once the terminal is open, copy the single-line install statement from the Homebrew website and paste it into the Terminal app. Then press ‘Enter’. You will get a bunch of straightforward questions, after which homebrew installs itself. 2.1.2 Installing your first application using homebrew After homebrew is installed, you can use it to install other applications. You can search for software available for install through homebrew by using the website formulae.brew.sh. Let us install the [Textmate] text editor that we might need later. We do so using the Terminal app app, in which we type brew install --cask textmate 2.1.3 Updating all applications that have been installed via homebrew This is where things get handier than installing all software individually: brew update &amp;&amp; brew upgrade 2.2 Rstudio Rather than using the absolute bare bones version of R, I’d use Rstudio as it provides a full-blown IDE (integrated development environment) with text editor, variable inspector, file browswer and more. You can either use the Rstudio server that is offered by the University of Exeter, or use a locally installed version of Rstudio. Personally, the server-based version of Rstudio is probably the easiest to use, as it already has tons of packages pre-installed. However, if you have no uni access anymore or don’t have continuous internet access, a locally installed version of Rstudio is best. 2.2.1 Using the web-based Rstudio server You can simply access this by using your web browser. You can access the Rstudio server here: https://rstudio01.cles.ex.ac.uk, using your University of Exeter login. Once logged in, make sure to run the 4.x.x version, rather than a 3.x.x version. You can change versions on the top right of your Rstudio window within in your web browser. By now 2.2.2 Installing Rstudio on your own computer on windows or mac If you have a Windows machine, the best way to install Rstudio is to download the Desktop version. If you are on a mac, one could use: brew install --cask rstudio 2.3 Installing Python For those of you who will need to install python (installing python is more the exception than the norm, hence ask if unsure), it is best to install the Anaconda distribution, which provides the whole python bundle and comes with a package manager. 2.4 Installing software to develop C++ programs When working with the programming language C++, we will need to use the following software: A UNIX Terminal (already installed on a mac, you will need to install on windows - see below) A C++ compiler, which in our case will be clang on mac and g++ on windows (see below). A better-than-normal text editor. When on Windows, install the freely available text editor Notepad++. See the Notepad++ website for installation instructions. When on a mac, install an editor such as textmate (see below). A software build environment like make or cmake. 2.5 Yes, we really need a UNIX terminal. You will need a UNIX terminal to access a broad collection of tools, namely the compiler g++ o turn your C++ code into an executable programme, the command git to get code from repositories and make or cmake to automate the building of your code. Sure, it would be possible to avoid a UNIX toolchain, by using Microsoft’s Visual Studio or another compiler. However, chances are that we’ll be running things on one of the University’s Linux computing clusters later on. If one has been working with Visual Studio, it typically is a massive pain to switch back to the different tools and compilers used on these Linux clusters, particularly when we would use associated libraries such as gsl or eigen. By contrast, when you already use a UNIX terminal on your local computer, moving to use the University’s Linux cluster is very easy. 2.6 Windows: install MSYS2 as our UNIX terminal To get a UNIX terminal running on windows, we will install the MSYS2 environment. See here for the installation video. There is also another video that shows you how to subsequently work with the compiler, once installed. 2.6.1 Accessing MSYS2 once installed Once everything is installed, use the MSYS2 MinGW x64 executable, rather than the default MSYS2 executable. To start this, simply type msys in the windows search box (see screenshot) and the x64 version will appear in the menu: Figure 2.1: Location of MSYS x64 in the windows menu. The default MSYS2 app will appear on top, but the x64 version can be found right below (red circle). 2.6.2 Accessing MSYS2’s home directory through Windows File Explorer The home directory in MSYS2 is indicated by the ~ sign, which points to a directory on your hard drive. However, the MSYS2 home directory is not the same as your Windows home directory! Rather, MSYS2’s home directory ~ maps to something like C:/msys64/home/$your_user_name, rather than to the usual location of the windows home directory which is something like C:/Users/$your_user_name/home, where you need to replace $your_user_name with your windows user name. Knowing that ~ is somewhere else than the standard home directory, you can still use the Windows File Explorer to access this location and inspect the files present in ~. Click the This PC in the left column of the Windows File Explorer and go to C:/msys64/home/$your_user_name. Here an example screenshot to clarify matters: Figure 2.2: Accessing the contents of the msys64 directory via Windows File Explorer. Later on, the simulation code and simulation output will be found within this directory (in particular, within its home directory). 2.6.3 Installing a command-line C++ compiler within MSYS2 Rather than using any C++ compiler like Visual Studio or Code Blocks, we use the compiler g++, as that compiler is the same as used on our computing clusters. To install it, see the instruction video here. 2.6.4 Installing git within MSYS2 We need git to download and synchronize code repositories. To install git within MSYS2 type the command pacman -S git 2.6.5 Windows: use notepad++ as your text editor of choice To edit and inspect source files, please do not use the standard text editor on windows, which is notepad. This crippled and lame editor cannot read source files with line endings that are used on different operating systems like linux or mac. Moreover, it does not have syntax colouring, which is a life saver when reading code. Hence, please install the free editor Notepad++ which provides syntax colouring and more. You can download a copy of Notepad++ here. If you don’t like Notepad++, have a google yourself. Any code editor that supports syntax coloring of C++,R,Python files and supports CR/LF and LF line endings should be OK. 2.7 Mac: a UNIX terminal is provided via the Terminal app within the Applications/Utilities folder To use the UNIX toolchain on a mac, you will need to use a UNIX terminal. Luckily this is installed as per default on any mac distribution. You can find the Terminal app in the Applications &gt; Utilities folder on your hard drive. See Apple’s support page here for more information on how to open this application. 2.7.1 Mac: Install g++ and git In order to install g++ on a Mac, you need to follow quite some instructions. Once this is installed g++ is installed, as is git. 2.7.2 Mac: install a text editor like textmate You can find textmate here. If you don’t like textmate, find any other code editor that supports syntax coloring of C++,R,Python files and supports CR/LF and LF line endings. "],["a-typical-daily-work-cycle-when-running-simulations.html", "Chapter 3 A typical daily work cycle when running simulations 3.1 Start the terminal 3.2 Get to your home directory 3.3 Check the contents of your home directory using ls 3.4 Exploring your local copy of the repository 3.5 Updating the software repository 3.6 Compiling the software", " Chapter 3 A typical daily work cycle when running simulations Here we illustrate some of the basic steps we take to run simulations and analyze them. Please type along so that you can see what is happening on your own computer. 3.1 Start the terminal By now, you should be able to start your UNIX terminal programme, which should be MSYS2-64 on windows or the Terminal programme on a mac. If you don’t know where to find your UNIX terminal, read section 2.4 and if that still does not work, get in touch. 3.2 Get to your home directory By using your UNIX terminal, go to your home directory. The home directory is contained in the alias ~ and can be accessed by using the cd command in the following way: cd ~ You can then use the pwd command (where pwd is an abbreviation of present working directory) to ensure that you are indeed in your home directory: pwd ** Note for windows users: ** the MSYS2 home directory is not the same as your windows home directory. See for more information 2.6.2. 3.3 Check the contents of your home directory using ls You can check the contents of your home directory using the ls (list files) command, where we provide the ls command with some additional ‘flags’ to modify the information that is provided by ls. One can provide such flags by adding a space followed by a dash - and then followed by some additional single-character modifiers that change the behaviour of the ls command. For example, we can type ls -alnh Here we used the flags -alnh to make sure (i) we list hidden files (-a), (ii) we list all files below each other (the long format: -l) rather than dumping all files together on a single line, (iii) we list all files with numeric user and group IDs (-n) and finally (iv) we list all dates and numbers in a human-readable format (-h). If you want to know more about the documentation of the ls command, type: man ls which provides you with a manual page (man page) of the ls command. You can close this man page and return to the command line by pressing the q button. 3.3.1 Using ls to locate the github repository that contains your simulation code All research projects in this lab use code repositories that I have uploaded to github and that you can download to your own computer and modify. See here for a list of all repositories. If you don’t know which of these repositories to download to your own computer, get in touch. Working with code repositories on github has several advantages: for starters, it facilitates carrying through updates without having to e-mail back-and-forth umpteen different versions of the source code. Second, if you have your own github account and I have provided you with write access to my code repository, you can then submit your own updates to my github repository, so that we all have the latest version of the code available. Third, github is great when it comes to keep track of all changes, which is essential when you want to roll back changes, for example. Fourth, it makes sure that the science we are doing is accessible and hence hopefully a bit more transparent. If you vaguely remember using the git clone command before, perhaps you should first inspect the output of the ls -lanh command from within your home directory (cd ~) to find out whether a copy of the github repository in question is already present within your home directory. For example, the command below shows code that displays the contents of a home directory on a remote computer: where you see several github repositories listed. If you want to understand what all the columns are, have a look here. Note that the d modifiers in front mean that the file is a directory (as is the case for the coop_size directory, for example), whereas a - in front means the listed file is a regular file (as is the case for the summary_data.csv file). Git repositories are typically contained in directories unless we have messed things up. If you indeed find a directory within your home directory that looks remarkably similar to one of the repositories, it means you have downloaded the repository already before. Hence, you can skip section 3.3.2. 3.3.2 Download the simulation code by using git clone To download a copy of the remote repository containing the simulation code to your own computer, execute the following command: git clone https://github.com/bramkuijper/YOUR_REPOSITORY where YOUR_REPOSITORY is the name of the repository that you should be using from this list. By now, you should know the name of the repository you should be cloning, otherwise get in touch. 3.4 Exploring your local copy of the repository Once everything is cloned to your local hard disk, you can explore its contents. Use cd $repository_name (where you need to replace $repository_name with the name of your repository, for example cd coop_size) to enter into the repository. 3.4.1 Pro-tip: save on typing a lot by using Tab autocompletion Typing out whole directory names like cd sexsel_space_multisignal gets tedious after a while. Luckily, you can save on typing everything. Instead type the first few letters like cd s and then pressing the Tab button to autocomplete the directory name. If there is only one directory name that starts with an s, pressing Tab results in immediate autocompletion of the directory name. If however, there are multiple directories starting with an s, the terminal will output all the different directories starting with an s (after pressing Tab at least twice). For example, typing cd s in the directory that has contents as listed in the above listing ?? and then pressing Tab twice will give you cd s #sexsel_bacteria/ sexsel_space_multisignal/ sex_specific_maternal_effect/ stress_damage/ what this means is that the terminal found four alternative directory names that start with an s. It then asks you to supply more characters so that it knows which directory name to autocomplete. Hence if I’d type cd sexsel_s followed by Tab, there are no alternatives left, and the terminal immediately autocompletes the remainder of the directory name sexsel_space_multisignal. 3.4.2 Exploring your local repository continued… If the cd command was successful, you can then use ls to explore the contents. With respect to the coop_size directory, for example, we have the following listing: ls -alnh total 564K #drwxr-xr-x 1 848446593 848298497 336 May 26 10:13 . #drwxr-xr-x 1 848446593 848298497 178 May 24 00:48 .. #-rw-r--r-- 1 848446593 848298497 4.8K May 24 00:48 coop_fluct.lyx #-rw-r--r-- 1 848446593 848298497 9.6K May 24 00:48 coop_size_continuous.nb #-rw-r--r-- 1 848446593 848298497 497K May 24 00:48 coop_size.nb #-rw-r--r-- 1 848446593 848298497 16K May 24 00:48 coop_variable_envts_leggett.nb #-rw-r--r-- 1 848446593 848298497 3.6K May 24 00:48 coop_variable_envts_queuing.nb #drwxr-xr-x 1 848446593 848298497 32 May 24 00:53 data #drwxr-xr-x 1 848446593 848298497 94 May 27 10:24 figs #drwxr-xr-x 1 848446593 848298497 204 May 27 00:05 .git #-rw-r--r-- 1 848446593 848298497 123 May 24 00:53 .gitignore #drwxr-xr-x 1 848446593 848298497 126 May 26 14:12 sbin #drwxr-xr-x 1 848446593 848298497 98 May 24 00:53 src #-rw-r--r-- 1 848446593 848298497 19K May 24 00:53 varying_patch_size_overlap.lyx There is a whole bunch of files here, but we typically want to be looking into the src directory, which contains - in turn - other subdirectories such as ibm or numerical with source code. By now, you should Alternatively, you can also your file explorer programme (Windows File Explorer or Finder) to go the location of your repository (see section 2.6.2). The files that end in .cpp are the C++ source files, which contain the necessary code. The files that end in .hpp are C++ header files, which provide a blueprint to the C++ compiler about the interface of the different classes and structs used. Next, you may also see a file such as CMakelists.txt or makefile which are used by cmake and make to handily automate compilation of all the files. 3.4.3 Inspecting the source files You can inspect the contents of the source files by opening them in Notepad++ (on windows, see section ??), which you can open through the windows start menu. Within notepad++ you then have to navigate to the location of your MSYS2 home directory (see section 2.6.2. On a mac, you can inspect the contents of the source files by opening them in textmate, which you can find in your Applications folder. 3.5 Updating the software repository If you would like to update your repository to contain the latest version, cd to the directory of the repository on your local computer and obtain the most recent version of the repository. You do so by typing git pull If you see the following message: Already up-to-date. you already have the latest version of the source code in your repository. 3.5.1 Conflicts when updating the software repository It may be that you get messages like git pull #error: Pulling is not possible because you have unmerged files. #hint: Fix them up in the work tree, and then use &#39;git add/rm &lt;file&gt;&#39; #hint: as appropriate to mark resolution and make a commit. #fatal: Exiting because of an unresolved conflict. in which case you might have files in which you have made local edits which clash with any remote edits. This is called a ‘conflict’, as apparently, your edits conflict with remote edits. There are two options: If you deem your edits to not be so important: Use git to overwrite the edits with the version from the remote repository. To this end, cd into the folder of your repository and do the following: git checkout --theirs . which tells git to checkout files from the remote repository (--theirs) and replace files in the local repository (.). If your edits are very important If you open your files in your editor, you should find lines that highlight &gt;&gt;&gt;&gt; some text ==== some text &lt;&lt;&lt; which reflect the various edits. Try to make choices about what you find important and make sure that the &gt;&gt;&gt;&gt;, === and &lt;&lt;&lt;&lt; characters are removed from the file. 3.6 Compiling the software For a typical simulation, you will find the source code in the src directory (or one of its subdirectories) within the repository. If you want to compile the simulation code, "],["some-writing-advice.html", "Chapter 4 Some Writing Advice 4.1 Read about writing: literature that helps improving writing skills 4.2 Example theory papers to help you write about theory 4.3 Common examples where writing goes wrong", " Chapter 4 Some Writing Advice Writing your dissertation or literature review can be a challenge. Here some advice: 4.1 Read about writing: literature that helps improving writing skills We all read books to improve our writing, even when you are a native speaker and think you have seen it all! (hint: you haven’t.) Reading about writing techniques is a great way to improve your skills. If you want to know more about scientific writing, perhaps the short book by Mack (2018) might well be worth trying. This book is freely available online here. Another good book on how to write scientific papers is Gastel and Day (2022). For a literature review, it can be helpful to read the paper by Sayer (2018), which is all about how to write review papers. Next to learning more about the techniques of scientific writing, it might be helpful to improve your general writing skills too. Several good books are available. A first one is Williams (1990) which has later on appeared with different titles. Other books are Pinker (2014) and Zinsser (2006). A classic is Strunk (1959). Hard copies of most of these books are available at the library or in my office. Of course, you should not be looking around the internet for pdfs of these books! 4.2 Example theory papers to help you write about theory Papers on theory are a bit different than empirical studies. Hence, here a bunch of examples to see how theory papers are typically written: (Fawcett et al. 2007),(Trimmer et al. 2015),(Kahn, Jennions, and Kokko 2015). In a theory paper it is important to explain the parameters that you use and why. In part, such explanations may focus on a comparison to previous theory, as in: “To compare our model to predictions made by the classical hawk-dove game (Maynard Smith and Price 1973), the cost of losing a fight \\(c\\) and the value \\(v\\) of winning a fight are modeled as unidimensional variables with \\(c &gt; v\\).”. Alternatively, you could refer to the empirical literature, as in: “In speckled wood butterflies, it is unlikely that \\(v&gt;c\\), because territories are far too temporary to be of any value.” 4.3 Common examples where writing goes wrong 4.3.1 Back up qualitative statements Avoid sentences like “The random matrix method introduced by May 1977 has been highly important in theoretical ecology. Here we use this technique to understand how mutualisms affect ecosystem dynamics”. The first sentence makes a claim about importance, but does not back it up with a statement that indeed testifies of its importance (one may add: “as this approach has been central to the analysis of ecosystem stability in several later studies [citations]”). But even then, you could argue that it still tells very little: why not tell us instead what the random matrix method is about and what it does? 4.3.2 Being overly verbose Avoid sentences such as “Territory productivity can be measured by a variety of indirect and direct methods (Davies et al 2012). These measures can be used to calibrate simulation models.” The mentioning of “indirect and direct methods” adds very little here. Why not give at least an example of an indirect and a direct method? Or perhaps scrap the indirect vs direct and just focus on ‘different methods’ and then give an example of such a method. Or if you realize the sentence on different methods adds too little, why not omit it altogether? 4.3.3 Make sure each paragraph addresses the broader question It is easy to get mired into examples or definition questions that are a bit particularly. Unless you make explicit why the paragraph contributes to insight about the broader question asked in your dissertation, consider what you are writing irrelevant. 4.3.4 Clearly label figures If you use a figure with different panels, each panel should have a label, such as “A”, “B”, “C”, etc. There are no excuses. If your R package does not do that, edit your figure in a graphics programme, or look at some of the queries about labeling figure panels in ggplot, for example here. 4.3.5 Reference all figures If you don’t refer to a figure in the text, you don’t need it. Throw it out. 4.3.6 Explain terminology upon first use Typically, assume that the audience is someone who knows quite something but is not necessarily a scientist. For example, a 2nd-year undergraduate. So any terminology needs to be explained, let alone any abbreviations upon first mentioning. 4.3.7 Various writing errors: It is evolutionarily stable strategy, not evolutionary stable strategy Temperature-related perturbations instead of temperature related perturbations "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
